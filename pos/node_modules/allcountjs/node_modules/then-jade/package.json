{
  "name": "then-jade",
  "version": "2.4.1",
  "description": "Jade with async/streaming support via promises and generators",
  "keywords": [],
  "dependencies": {
    "barrage": "~1.1.0",
    "jade": "1.11.0",
    "promise": "~7.0.3",
    "regenerator": "~0.8.30",
    "then-yield": "0.0.1",
    "with": "~5.0.0"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "~3.1.2",
    "uglify-js": "~2.4.12",
    "coffee-script": "~1.7.1",
    "jstransformer-cdata": "0.0.3",
    "jstransformer-coffee-script": "0.0.2",
    "jstransformer-less": "^1.0.0",
    "jstransformer-marked": "0.0.1",
    "jstransformer-stylus": "0.0.1",
    "jstransformer-verbatim": "0.0.2",
    "less": "~1.6.3",
    "marked": "~0.3.1",
    "stylus": "~0.42.2",
    "gnode": "0.0.6",
    "gethub": "~1.0.2"
  },
  "scripts": {
    "test": "node test/download-jade-tests && mocha -R spec"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/then/then-jade.git"
  },
  "author": {
    "name": "ForbesLindesay"
  },
  "license": "MIT",
  "readme": "<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" align=\"right\" /></a>\n# then-jade\n\nJade template engine with async/streaming support via promises and generators.\n\nThe Jade template engine is a templating engine with a 2 stage process :\n * stage 1: synchronous compilation of a template, leading to a rendering function\n * stage 2: synchronous rendering of compiled template using user defined `locals`\n\n`then-jade` makes sure that the rendering stage of the process (stage 2) becomes asynchronous: \n * Generators and Promises can be used in the user defined `locals` and the rendering will be progressive, waiting asynchronously for the resolution of the promises\n * The rendered output is made available as a ReadableStream with back-pressure implemented, so the rendering will only be done as fast as the downstream WritableStream can handle it\n\nIt is not the goal of `then_jade` to modify the compilation phase of the process (stage 1). This means for example that extends & includes will continue to be loaded synchronously by jade.\n\n[![Build Status](https://travis-ci.org/jadejs/then-jade.png?branch=master)](https://travis-ci.org/then/then-jade)\n[![Dependency Status](https://gemnasium.com/jadejs/then-jade.png)](https://gemnasium.com/then/then-jade)\n[![NPM version](https://badge.fury.io/js/then-jade.png)](http://badge.fury.io/js/then-jade)\n\n## Installation\n\n    npm install then-jade\n\n## API\n\nBefore all examples, you will need:\n\n```js\nvar thenJade = require('then-jade');\n```\n\n### compile(str, options)\n\nCompiles a string containing a jade template into a rendering function.\n\n```js\nvar fn = thenJade.compile(str, options);\n```\n\nThe rendering function can be called as `fn(locals, callback)` where `locals` are the user defined variables or generator/promises that can be used in the template. `callback` is a node-style `callback(err, res)` that will be called with the rendered template once the rendering is finished or with an error if something went wrong.\n\nFor `options`, see the documentation for `compileStreaming`\n\n\n### compileStreaming(str, options)\n\nCompiles a string containing a jade template into a rendering function.\n\n```js\nvar fn = thenJade.compileStreaming(str, options);\n```\n\nThe rendering function can be called as `fn(locals)` where `locals` are the user defined variables or generator/promises that can be used in the template. The result of calling this function is a ReadableStream that will stream the rendered template.\n\n### render(str, options, callback)\n\n* Render the given `str` of jade.\n\nIf the function is called with an optional node-style `callback`, the callback\nwill be called with the result when the rendering is finished.\n\nOtherwise, the function will return a Promise that will be fulfilled when\nthe rendering is finished.\n\nOptions:\n  - `filename` filename required for `include` / `extends`\n\n### renderStreaming(str, options)\n\nRender the given `str` of jade\n\n`options`:\n  - `filename` filename required for `include` / `extends`\n\n`options` are used as `locals` at rendering time.\n\nThe result is a ReadableStream wrapping the asynchronous rendering of the template.\nThis stream can be piped into a WritableStream.\n\n### renderFile(path, options, callback)\n\nRender the given `path` file containing a jade.\nThe compilation of the file is synchronous and uses an internal in-memory cache\nto avoid re-compiling the same file twice.\nThe rendering is asynchronous.\n\nIf the function is called with an optional node-style `callback`, the callback\nwill be called with the result when the rendering is finished.\n\nOtherwise, the function will return a Promise that will be fulfilled when\nthe rendering is finished.\n\n`options` are used as `locals` at rendering time.\n\n### renderFileStreaming(path, options) \n\nRender the given `path` file containing a jade.\nThe compilation of the file is synchronous and uses an internal in-memory cache\nto avoid re-compiling the same file twice.\nThe rendering is asynchronous.\n\nThe result is a ReadableStream wrapping the asynchronous rendering of the template.\nThis stream can be piped into a WritableStream.\n\n`options` are used as `locals` at rendering time.\n\n## License\n\n  MIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/then/then-jade/issues"
  },
  "_id": "then-jade@2.4.1",
  "_from": "then-jade@^2.2.1"
}
