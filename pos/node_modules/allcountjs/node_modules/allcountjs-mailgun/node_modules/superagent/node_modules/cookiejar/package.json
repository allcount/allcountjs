{
  "name": "cookiejar",
  "version": "2.0.6",
  "author": {
    "name": "bradleymeck"
  },
  "main": "cookiejar.js",
  "description": "simple persistent cookiejar system",
  "license": "MIT",
  "jshintConfig": {
    "node": true
  },
  "scripts": {
    "test": "node tests/test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/bmeck/node-cookiejar.git"
  },
  "devDependencies": {
    "jshint": "^2.8.0"
  },
  "readme": "#CookieJar\n\nSimple robust cookie library\n\n##Exports\n\n###CookieAccessInfo(domain,path,secure,script)\n\n    class to determine matching qualities of a cookie\n\n#####Properties\n\n* String domain - domain to match\n* String path - path to match\n* Boolean secure - access is secure (ssl generally)\n* Boolean script - access is from a script\n\n\n###Cookie(cookiestr_or_cookie, request_domain, request_path)\n\n    turns input into a Cookie (singleton if given a Cookie)\n    the `request_domain` argument is used to default the domain if it is not explicit in the cookie string \n    the `request_path` argument is used to set the path if it is not explicit in a cookie String.\n\n    explicit domains/paths will cascade, implied domains/paths must *exactly* match (see http://en.wikipedia.org/wiki/HTTP_cookie#Domain_and_Pat)\n\n#####Properties\n\n* String name - name of the cookie\n* String value - string associated with the cookie\n* String domain - domain to match (on a cookie a '.' at the start means a wildcard matching anything ending in the rest)\n* Boolean explicit_domain - if the domain was explicitly set via the cookie string\n* String path - base path to match (matches any path starting with this '/' is root)\n* Boolean explicit_path - if the path was explicitly set via the cookie string\n* Boolean noscript - if it should be kept from scripts\n* Boolean secure - should it only be transmitted over secure means\n* Number expiration_date - number of millis since 1970 at which this should be removed\n\n#####Methods\n\n* String toString() - the __set-cookie:__ string for this cookie\n* String toValueString() - the __cookie:__ string for this cookie\n* Cookie parse(cookiestr, request_domain, request_path) - parses the string onto this cookie or a new one if called directly\n* Boolean matches(access_info) - returns true if the access_info allows retrieval of this cookie\n* Boolean collidesWith(cookie) - returns true if the cookies cannot exist in the same space (domain and path match)\n\n\n###CookieJar()\n\n    class to hold numerous cookies from multiple domains correctly\n\n#####Methods\n\n* Cookie setCookie(cookie, request_domain, request_path) - add a cookie to the jar\n* Cookie[] setCookies(cookiestr_or_list, request_domain, request_path) - add a large number of cookies to the jar\n* Cookie getCookie(cookie_name,access_info) - get a cookie with the name and access_info matching\n* Cookie[] getCookies(access_info) - grab all cookies matching this access_info\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/bmeck/node-cookiejar/issues"
  },
  "_id": "cookiejar@2.0.6",
  "_from": "cookiejar@2.0.6"
}
