{
  "name": "cookie-session",
  "description": "cookie session middleware",
  "repository": {
    "type": "git",
    "url": "git://github.com/expressjs/cookie-session"
  },
  "version": "1.2.0",
  "keywords": [
    "connect",
    "express",
    "middleware",
    "session"
  ],
  "dependencies": {
    "cookies": "0.5.0",
    "debug": "~2.2.0",
    "on-headers": "~1.0.0"
  },
  "devDependencies": {
    "connect": "3",
    "istanbul": "0.3.17",
    "mocha": "2.2.5",
    "supertest": "1.0.1"
  },
  "files": [
    "HISTORY.md",
    "LICENSE",
    "README.md",
    "index.js"
  ],
  "license": "MIT",
  "scripts": {
    "test": "mocha --check-leaks --reporter spec --bail test/",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --check-leaks --reporter dot test/",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --check-leaks --reporter spec test/"
  },
  "readme": "# cookie-session\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\n  Simple cookie-based session middleware.\n\n## Semantics\n\n  This module provides \"guest\" sessions, meaning any visitor will have a session,\n  authenticated or not. If a session is _new_ a `Set-Cookie` will be produced regardless\n  of populating the session.\n\n## Install\n\n```bash\n$ npm install cookie-session\n```\n\n## API\n\n```js\nvar cookieSession = require('cookie-session')\n```\n\n### cookieSession(options)\n\nCreate a new cookie session middleware with the provided options.\n\n#### Options\n\nCookie session accepts these properties in the options object.\n\n##### name\n\nThe name of the cookie to set, defaults to `express:sess`.\n\n##### keys\n\nThe list of keys to use to sign & verify cookie values. Set cookies are always\nsigned with `keys[0]`, while the other keys are valid for verification, allowing\nfor key rotation.\n\n##### secret\n\nA string which will be used as single key if `keys` is not provided.\n\n##### Cookie Options\n\nOther options are passed to `cookies.get()` and `cookies.set()` allowing you\nto control security, domain, path, and signing among other settings.\n\nThe options can also contain any of the follow (for the full list, see\n[cookies module documentation](https://www.npmjs.org/package/cookies#readme):\n\n  - `maxAge`: a number representing the milliseconds from `Date.now()` for expiry\n  - `expires`: a `Date` object indicating the cookie's expiration date (expires at the end of session by default).\n  - `path`: a string indicating the path of the cookie (`/` by default).\n  - `domain`: a string indicating the domain of the cookie (no default).\n  - `secure`: a boolean indicating whether the cookie is only to be sent over HTTPS (`false` by default for HTTP, `true` by default for HTTPS).\n  - `secureProxy`: a boolean indicating whether the cookie is only to be sent over HTTPS (use this if you handle SSL not in your node process).\n  - `httpOnly`: a boolean indicating whether the cookie is only to be sent over HTTP(S), and not made available to client JavaScript (`true` by default).\n  - `signed`: a boolean indicating whether the cookie is to be signed (`false` by default). If this is true, another cookie of the same name with the `.sig` suffix appended will also be sent, with a 27-byte url-safe base64 SHA1 value representing the hash of _cookie-name_=_cookie-value_ against the first [Keygrip](https://github.com/expressjs/keygrip) key. This signature key is used to detect tampering the next time a cookie is received.\n  - `overwrite`: a boolean indicating whether to overwrite previously set cookies of the same name (`true` by default). If this is true, all cookies set during the same request with the same name (regardless of path or domain) are filtered out of the Set-Cookie header when setting this cookie.\n\n### req.session\n\nRepresents the session for the given request.\n\n#### .isNew\n\nIs `true` if the session is new.\n\n#### .populated\n\nDetermine if the session has been populated with data or is empty.\n\n### req.sessionOptions\n\nRepresents the session options for the current request. These options are a\nshallow clone of what was provided at middleware construction and can be\naltered to change cookie setting behavior on a per-request basis.\n\n### Destroying a session\n\n  To destroy a session simply set it to `null`:\n\n```js\nreq.session = null\n```\n\n## Example\n\n### Simple view counter example\n\n```js\nvar cookieSession = require('cookie-session')\nvar express = require('express')\n\nvar app = express()\n\napp.set('trust proxy', 1) // trust first proxy\n\napp.use(cookieSession({\n  name: 'session',\n  keys: ['key1', 'key2']\n}))\n\napp.use(function (req, res, next) {\n  var n = req.session.views || 0\n  req.session.views = n++\n  res.end(n + ' views')\n})\n\napp.listen(3000)\n```\n\n## Per-user sticky max age\n\n```js\nvar cookieSession = require('cookie-session')\nvar express = require('express')\n\nvar app = express()\n\napp.set('trust proxy', 1) // trust first proxy\n\napp.use(cookieSession({\n  name: 'session',\n  keys: ['key1', 'key2']\n}))\n\n// This allows you to set req.session.maxAge to let certain sessions\n// have a different value than the default.\napp.use(function (req, res, next) {\n  req.sessionOptions.maxAge = req.session.maxAge || req.sessionOptions.maxAge\n})\n\n// ... your logic here ...\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/cookie-session.svg\n[npm-url]: https://npmjs.org/package/cookie-session\n[travis-image]: https://img.shields.io/travis/expressjs/cookie-session/master.svg\n[travis-url]: https://travis-ci.org/expressjs/cookie-session\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/cookie-session.svg\n[coveralls-url]: https://coveralls.io/r/expressjs/cookie-session?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/cookie-session.svg\n[downloads-url]: https://npmjs.org/package/cookie-session\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg\n[gratipay-url]: https://www.gratipay.com/dougwilson/\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/expressjs/cookie-session/issues"
  },
  "_id": "cookie-session@1.2.0",
  "_from": "cookie-session@^1.0.2"
}
