{
  "name": "uid-safe",
  "description": "URL and cookie safe UIDs",
  "version": "2.0.0",
  "contributors": [
    {
      "name": "Douglas Christopher Wilson",
      "email": "doug@somethingdoug.com"
    },
    {
      "name": "Jonathan Ong",
      "email": "me@jongleberry.com",
      "url": "http://jongleberry.com"
    }
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/crypto-utils/uid-safe"
  },
  "dependencies": {
    "base64-url": "1.2.1"
  },
  "devDependencies": {
    "bluebird": "2.9.25",
    "istanbul": "0.3.9",
    "mocha": "~2.2.4",
    "proxyquire": "~1.2.0"
  },
  "files": [
    "LICENSE",
    "HISTORY.md",
    "README.md",
    "index.js"
  ],
  "engines": {
    "node": ">= 0.8"
  },
  "scripts": {
    "test": "mocha --trace-deprecation --reporter spec --bail --check-leaks test/",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --trace-deprecation --reporter dot --check-leaks test/",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --trace-deprecation --reporter spec --check-leaks test/"
  },
  "keywords": [
    "random",
    "generator",
    "uid",
    "safe"
  ],
  "readme": "# uid-safe\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nURL and cookie safe UIDs\n\nCreate cryptographically secure UIDs safe for both cookie and URL usage.\nThis is in contrast to modules such as [rand-token](https://www.npmjs.com/package/rand-token)\nand [uid2](https://www.npmjs.com/package/uid2) whose UIDs are actually skewed\ndue to the use of `%` and unnecessarily truncate the UID.\nUse this if you could still use UIDs with `-` and `_` in them.\n\n## Installation\n\n```sh\n$ npm install uid-safe\n```\n\n## API\n\n```js\nvar uid = require('uid-safe')\n```\n\n### uid(byteLength, callback)\n\nAsynchronously create a UID with a specific byte length. Because `base64`\nencoding is used underneath, this is not the string length. For example,\nto create a UID of length 24, you want a byte length of 18.\n\n```js\nuid(18, function (err, string) {\n  if (err) throw err\n  // do something with the string\n})\n```\n\n### uid(byteLength)\n\nAsynchronously create a UID with a specific byte length and return a\n`Promise`.\n\n**To use promises, you must define a global `Promise` if necessary.**\n\n```js\nuid(18).then(function (string) {\n  // do something with the string\n})\n```\n\n### uid.sync(byteLength)\n\nA synchronous version of above.\n\n```js\nvar string = uid.sync(18)\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/uid-safe.svg\n[npm-url]: https://npmjs.org/package/uid-safe\n[node-version-image]: https://img.shields.io/node/v/uid-safe.svg\n[node-version-url]: http://nodejs.org/download/\n[travis-image]: https://img.shields.io/travis/crypto-utils/uid-safe/master.svg\n[travis-url]: https://travis-ci.org/crypto-utils/uid-safe\n[coveralls-image]: https://img.shields.io/coveralls/crypto-utils/uid-safe/master.svg\n[coveralls-url]: https://coveralls.io/r/crypto-utils/uid-safe?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/uid-safe.svg\n[downloads-url]: https://npmjs.org/package/uid-safe\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/crypto-utils/uid-safe/issues"
  },
  "_id": "uid-safe@2.0.0",
  "_from": "uid-safe@~2.0.0"
}
