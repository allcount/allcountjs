// Generated by CoffeeScript 1.9.3
(function() {
  var Q, _, cloudinary, dotenv, expect, fs, http, https;

  dotenv = require('dotenv');

  dotenv.load();

  https = require('https');

  http = require('http');

  expect = require("expect.js");

  cloudinary = require("../cloudinary");

  fs = require('fs');

  Q = require('q');

  _ = require("lodash");

  describe("uploader", function() {
    var EMPTY_IMAGE, ICON_FILE, IMAGE_FILE, LARGE_RAW_FILE, LARGE_VIDEO, RAW_FILE, TIMEOUT_LONG, TIMEOUT_MEDIUM, TIMEOUT_SHORT, upload_image, uploaded, uploadedRaw;
    if (cloudinary.config().api_secret == null) {
      return console.warn("**** Please setup environment for uploader test to run!");
    }
    LARGE_RAW_FILE = "test/resources/TheCompleteWorksOfShakespeare.mobi";
    LARGE_VIDEO = "test/resources/CloudBookStudy-HD.mp4";
    IMAGE_FILE = "test/resources/logo.png";
    EMPTY_IMAGE = "test/resources/empty.gif";
    RAW_FILE = "test/resources/docx.docx";
    ICON_FILE = "test/resources/favicon.ico";
    TIMEOUT_SHORT = 5000;
    TIMEOUT_MEDIUM = 20000;
    TIMEOUT_LONG = 120000;
    this.timeout(TIMEOUT_SHORT);
    uploaded = [];
    uploadedRaw = [];

    /**
     * Upload an image to be tested on.
     * @callback the callback recieves the public_id of the uploaded image
     */
    upload_image = function(callback) {
      return cloudinary.v2.uploader.upload(IMAGE_FILE, function(error, result) {
        expect(error).to.be(void 0);
        uploaded.push(result.public_id);
        return callback(result);
      });
    };
    before(function() {
      return uploaded = [];
    });
    beforeEach(function() {
      return cloudinary.config(true);
    });
    after(function(done) {
      var operations;
      this.timeout(TIMEOUT_LONG);
      operations = [];
      if (!_.isEmpty(uploaded)) {
        operations.push(cloudinary.v2.api.delete_resources(uploaded));
      }
      if (!_.isEmpty(uploadedRaw)) {
        operations.push(cloudinary.v2.api.delete_resources(uploadedRaw, {
          resource_type: "raw"
        }));
      }
      return Q.allSettled(operations)["finally"](function() {
        return done();
      });
    });
    it("should successfully upload file", function(done) {
      return upload_image(function(result) {
        var expected_signature;
        expect(result.width).to.eql(241);
        expect(result.height).to.eql(51);
        expected_signature = cloudinary.utils.api_sign_request({
          public_id: result.public_id,
          version: result.version
        }, cloudinary.config().api_secret);
        expect(result.signature).to.eql(expected_signature);
        return done();
      });
    });
    it("should successfully upload url", function(done) {
      return cloudinary.v2.uploader.upload("http://cloudinary.com/images/old_logo.png", function(error, result) {
        var expected_signature;
        if (error != null) {
          return done(new Error(error.message));
        }
        uploaded.push(result.public_id);
        expect(result.width).to.eql(241);
        expect(result.height).to.eql(51);
        expected_signature = cloudinary.utils.api_sign_request({
          public_id: result.public_id,
          version: result.version
        }, cloudinary.config().api_secret);
        expect(result.signature).to.eql(expected_signature);
        return done();
      });
    });
    describe("rename", function() {
      this.timeout(TIMEOUT_LONG);
      it("should successfully rename a file", function(done) {
        return upload_image(function(result) {
          var public_id;
          public_id = result.public_id;
          return cloudinary.v2.uploader.rename(public_id, public_id + "2", function(e1, r1) {
            if (e1 != null) {
              return done(new Error(e1.message));
            }
            return cloudinary.v2.api.resource(public_id + "2", function(e2, r2) {
              expect(e2).to.be(void 0);
              return done();
            });
          });
        });
      });
      it("should not rename to an existing public_id", function(done) {
        return upload_image(function(result) {
          var first_id;
          first_id = result.public_id;
          return upload_image(function(result) {
            var second_id;
            second_id = result.public_id;
            return cloudinary.v2.uploader.rename(first_id, second_id, function(e3, r3) {
              expect(e3).not.to.be(void 0);
              return done();
            });
          });
        });
      });
      return it("should allow to rename to an existing ID, if overwrite is true", function(done) {
        return upload_image(function(result) {
          var first_id;
          first_id = result.public_id;
          return upload_image(function(result) {
            var second_id;
            second_id = result.public_id;
            return cloudinary.v2.uploader.rename(first_id, second_id, {
              overwrite: true
            }, function(error, result) {
              expect(error).to.be(void 0);
              return cloudinary.v2.api.resource(second_id, function(error, result) {
                expect(result.format).to.eql("png");
                return done();
              });
            });
          });
        });
      });
    });
    describe("destroy", function() {
      return it("should delete a resource", function(done) {
        return upload_image(function(result) {
          var public_id;
          public_id = result.public_id;
          return cloudinary.v2.uploader.destroy(public_id, function(error, result) {
            if (error != null) {
              return done(new Error(error.message));
            }
            expect(result.result).to.eql("ok");
            return cloudinary.v2.api.resource(public_id, function(error, result) {
              expect(error).to.be.ok();
              return done();
            });
          });
        });
      });
    });
    it("should successfully call explicit api", function(done) {
      var current;
      current = this;
      return cloudinary.v2.uploader.explicit("cloudinary", {
        type: "twitter_name",
        eager: [
          {
            crop: "scale",
            width: "2.0"
          }
        ]
      }, function(error, result) {
        var url;
        if (error == null) {
          url = cloudinary.utils.url("cloudinary", {
            type: "twitter_name",
            crop: "scale",
            width: "2.0",
            format: "png",
            version: result["version"]
          });
          expect(result.eager[0].url).to.eql(url);
          return done();
        } else {
          if (error.code === 420) {
            console.warn(error.message);
            console.warn("Try running '" + current.test.title + "' again in 10 minutes");
            current.test.pending = true;
            return done();
          } else {
            return done(new Error(error.message));
          }
        }
      });
    });
    it("should support eager in upload", function(done) {
      this.timeout(TIMEOUT_SHORT);
      return cloudinary.v2.uploader.upload(IMAGE_FILE, {
        eager: [
          {
            crop: "scale",
            width: "2.0"
          }
        ]
      }, function(error, result) {
        if (error != null) {
          return done(new Error(error.message));
        }
        return done();
      });
    });
    describe("custom headers", function() {
      it("should support custom headers in object format e.g. {Link: \"1\"}", function(done) {
        return cloudinary.v2.uploader.upload(IMAGE_FILE, {
          headers: {
            Link: "1"
          }
        }, function(error, result) {
          if (error != null) {
            return done(new Error(error.message));
          }
          uploaded.push(result.public_id);
          return done();
        });
      });
      return it("should support custom headers as array of strings e.g. [\"Link: 1\"]", function(done) {
        return cloudinary.v2.uploader.upload(IMAGE_FILE, {
          headers: ["Link: 1"]
        }, function(error, result) {
          if (error != null) {
            return done(new Error(error.message));
          }
          uploaded.push(result.public_id);
          return done();
        });
      });
    });
    it("should successfully generate text image", function(done) {
      return cloudinary.v2.uploader.text("hello world", function(error, result) {
        if (error != null) {
          return done(new Error(error.message));
        }
        uploaded.push(result.public_id);
        expect(result.width).to.within(50, 70);
        expect(result.height).to.within(5, 15);
        return done();
      });
    });
    it("should successfully upload stream", function(done) {
      var file_reader, stream;
      stream = cloudinary.v2.uploader.upload_stream(function(error, result) {
        var expected_signature;
        if (error != null) {
          return done(new Error(error.message));
        }
        uploaded.push(result.public_id);
        expect(result.width).to.eql(241);
        expect(result.height).to.eql(51);
        expected_signature = cloudinary.utils.api_sign_request({
          public_id: result.public_id,
          version: result.version
        }, cloudinary.config().api_secret);
        expect(result.signature).to.eql(expected_signature);
        return done();
      });
      file_reader = fs.createReadStream(IMAGE_FILE, {
        encoding: 'binary'
      });
      file_reader.on('data', function(chunk) {
        return stream.write(chunk, 'binary');
      });
      return file_reader.on('end', function() {
        return stream.end();
      });
    });
    describe("tags", function() {
      this.timeout(TIMEOUT_MEDIUM);
      it("should add tags to existing resources", function(done) {
        return upload_image(function(result1) {
          var first_id;
          first_id = result1.public_id;
          return upload_image(function(result2) {
            var second_id;
            second_id = result2.public_id;
            return cloudinary.v2.uploader.add_tag("tag1", [first_id, second_id], function(et1, rt1) {
              if (et1 != null) {
                return done(new Error(et1.message));
              }
              return cloudinary.v2.api.resource(second_id, function(error, r1) {
                if (error) {
                  return done(new Error(error.message));
                }
                expect(r1.tags).to.eql(["tag1"]);
                return done();
              });
            });
          });
        });
      });
      it("should keep existing tags when adding a new tag", function(done) {
        return upload_image(function(result1) {
          var public_id;
          public_id = result1.public_id;
          return cloudinary.v2.uploader.add_tag("tag1", public_id, function(error, result) {
            return cloudinary.v2.uploader.add_tag("tag2", public_id, function(error, result) {
              return cloudinary.v2.api.resource(public_id, function(e1, r1) {
                expect(r1.tags.sort()).to.eql(["tag1", "tag2"]);
                return done();
              });
            });
          });
        });
      });
      return it("should replace existing tag", function(done) {
        return cloudinary.v2.uploader.upload(IMAGE_FILE, {
          tags: ["tag1", "tag2"]
        }, function(error, result) {
          var public_id;
          if (error != null) {
            return done(new Error(error.message));
          }
          public_id = result.public_id;
          return cloudinary.v2.uploader.replace_tag("tag3Å", public_id, function() {
            return cloudinary.v2.api.resource(public_id, function(error, result) {
              expect(result.tags).to.eql(["tag3Å"]);
              return done();
            });
          });
        });
      });
    });
    it("should support timeouts", function(done) {
      return cloudinary.v2.uploader.upload("http://cloudinary.com/images/old_logo.png", {
        timeout: 1
      }, function(error, result) {
        expect(error.http_code).to.eql(499);
        expect(error.message).to.eql("Request Timeout");
        return done();
      });
    });
    it("should upload a file and base public id on the filename if use_filename is set to true", function(done) {
      this.timeout(TIMEOUT_MEDIUM);
      return cloudinary.v2.uploader.upload(IMAGE_FILE, {
        use_filename: true
      }, function(error, result) {
        if (error != null) {
          return done(new Error(error.message));
        }
        uploaded.push(result.public_id);
        expect(result.public_id).to.match(/logo_[a-zA-Z0-9]{6}/);
        return done();
      });
    });
    it("should upload a file and set the filename as the public_id if use_filename is set to true and unique_filename is set to false", function(done) {
      return cloudinary.v2.uploader.upload(IMAGE_FILE, {
        use_filename: true,
        unique_filename: false
      }, function(error, result) {
        if (error != null) {
          return done(new Error(error.message));
        }
        uploaded.push(result.public_id);
        expect(result.public_id).to.eql("logo");
        return done();
      });
    });
    describe("allowed_formats", function() {
      it("should allow whitelisted formats", function(done) {
        return cloudinary.v2.uploader.upload(IMAGE_FILE, {
          allowed_formats: ["png"]
        }, function(error, result) {
          if (error != null) {
            return done(new Error(error.message));
          }
          uploaded.push(result.public_id);
          expect(result.format).to.eql("png");
          return done();
        });
      });
      it("should prevent non whitelisted formats from being uploaded", function(done) {
        return cloudinary.v2.uploader.upload(IMAGE_FILE, {
          allowed_formats: ["jpg"]
        }, function(error, result) {
          expect(error.http_code).to.eql(400);
          return done();
        });
      });
      return it("should allow non whitelisted formats if type is specified and convert to that type", function(done) {
        return cloudinary.v2.uploader.upload(IMAGE_FILE, {
          allowed_formats: ["jpg"],
          format: "jpg"
        }, function(error, result) {
          if (error != null) {
            return done(new Error(error.message));
          }
          uploaded.push(result.public_id);
          expect(result.format).to.eql("jpg");
          return done();
        });
      });
    });
    it("should allow sending face coordinates", function(done) {
      var coordinates, custom_coordinates, different_coordinates;
      coordinates = [[120, 30, 109, 150], [121, 31, 110, 151]];
      different_coordinates = [[122, 32, 111, 152]];
      custom_coordinates = [1, 2, 3, 4];
      return cloudinary.v2.uploader.upload(IMAGE_FILE, {
        face_coordinates: coordinates,
        faces: true
      }, function(error, result) {
        if (error != null) {
          return done(new Error(error.message));
        }
        uploaded.push(result.public_id);
        expect(result.faces).to.eql(coordinates);
        return cloudinary.v2.uploader.explicit(result.public_id, {
          face_coordinates: different_coordinates,
          custom_coordinates: custom_coordinates,
          type: "upload"
        }, function(error2, result2) {
          if (error2 != null) {
            return done(new Error(error2.message));
          }
          return cloudinary.v2.api.resource(result2.public_id, {
            faces: true,
            coordinates: true
          }, function(ierror, info) {
            if (ierror != null) {
              return done(new Error(ierror.message));
            }
            expect(info.faces).to.eql(different_coordinates);
            expect(info.coordinates).to.eql({
              faces: different_coordinates,
              custom: [custom_coordinates]
            });
            return done();
          });
        });
      });
    });
    it("should allow sending context", function(done) {
      var context;
      this.timeout(TIMEOUT_LONG);
      context = {
        caption: "some caption",
        alt: "alternative"
      };
      return cloudinary.v2.uploader.upload(IMAGE_FILE, {
        context: context
      }, function(error, result) {
        if (error != null) {
          return done(new Error(error.message));
        }
        uploaded.push(result.public_id);
        return cloudinary.v2.api.resource(result.public_id, {
          context: true
        }, function(error, info) {
          if (error != null) {
            return done(new Error(error.message));
          }
          expect(info.context.custom.caption).to.eql("some caption");
          expect(info.context.custom.alt).to.eql("alternative");
          return done();
        });
      });
    });
    it("should support requesting manual moderation", function(done) {
      return cloudinary.v2.uploader.upload(IMAGE_FILE, {
        moderation: "manual"
      }, function(error, result) {
        uploaded.push(result.public_id);
        expect(result.moderation[0].status).to.eql("pending");
        expect(result.moderation[0].kind).to.eql("manual");
        return done();
      });
    });
    it("should support requesting raw conversion", function(done) {
      return cloudinary.v2.uploader.upload(RAW_FILE, {
        raw_convert: "illegal",
        resource_type: "raw"
      }, function(error, result) {
        expect(error != null).to.be(true);
        expect(error.message).to.contain("is not a valid");
        return done();
      });
    });
    it("should support requesting categorization", function(done) {
      return cloudinary.v2.uploader.upload(IMAGE_FILE, {
        categorization: "illegal"
      }, function(error, result) {
        expect(error != null).to.be(true);
        expect(error.message).to.contain("is not a valid");
        return done();
      });
    });
    it("should support requesting detection", function(done) {
      return cloudinary.v2.uploader.upload(IMAGE_FILE, {
        detection: "illegal"
      }, function(error, result) {
        expect(error).not.to.be(void 0);
        expect(error.message).to.contain("is not a valid");
        return done();
      });
    });
    it("should support requesting background_removal", function(done) {
      return cloudinary.v2.uploader.upload(IMAGE_FILE, {
        background_removal: "illegal"
      }, function(error, result) {
        expect(error != null).to.be(true);
        expect(error.message).to.contain("is invalid");
        return done();
      });
    });
    it("should support requesting auto_tagging", function(done) {
      return cloudinary.v2.uploader.upload(IMAGE_FILE, {
        auto_tagging: 0.5
      }, function(error, result) {
        expect(error != null).to.be(true);
        expect(error.message).to.contain("Must use");
        return done();
      });
    });
    describe("chunk_size:", function() {
      this.timeout(TIMEOUT_LONG);
      it("should specify chunk size", function(done) {
        return fs.stat(LARGE_RAW_FILE, function(err, stat) {
          return cloudinary.v2.uploader.upload_large(LARGE_RAW_FILE, {
            chunk_size: 7000000
          }, function(error, result) {
            uploadedRaw.push(result.public_id);
            expect(result.bytes).to.eql(stat.size);
            expect(result.etag).to.eql("4c13724e950abcb13ec480e10f8541f5");
            return done();
          });
        });
      });
      return it("should return error if value is less than 5MB", function(done) {
        return fs.stat(LARGE_RAW_FILE, function(err, stat) {
          return cloudinary.v2.uploader.upload_large(LARGE_RAW_FILE, {
            chunk_size: 40000
          }, function(error, result) {
            expect(error.message).to.eql("All parts except last must be larger than 5mb");
            return done();
          });
        });
      });
    });
    describe("upload_large", function() {
      this.timeout(TIMEOUT_LONG);
      it("should support uploading a small raw file", function(done) {
        return fs.stat(RAW_FILE, function(err, stat) {
          return cloudinary.v2.uploader.upload_large(RAW_FILE, function(error, result) {
            uploadedRaw.push(result.public_id);
            expect(result.bytes).to.eql(stat.size);
            expect(result.etag).to.eql("ffc265d8d1296247972b4d478048e448");
            return done();
          });
        });
      });
      return it("should support uploading large video files", function(done) {
        return fs.stat(LARGE_VIDEO, function(err, stat) {
          if (err != null) {
            return done(new Error(err.message));
          }
          return cloudinary.v2.uploader.upload_large(LARGE_VIDEO, function(error, result) {
            if (error != null) {
              return done(new Error(error.message));
            }
            expect(result.bytes).to.eql(stat.size);
            expect(result.etag).to.eql("ff6c391d26be0837ee5229885b5bd571");
            cloudinary.v2.uploader.destroy(result.public_id);
            return done();
          });
        });
      });
    });
    it("should support unsigned uploading using presets", function(done) {
      this.timeout(TIMEOUT_LONG);
      return cloudinary.v2.api.create_upload_preset({
        folder: "upload_folder",
        unsigned: true
      }, function(error, preset) {
        return cloudinary.v2.uploader.unsigned_upload(IMAGE_FILE, preset.name, function(error, result) {
          uploaded.push(result.public_id);
          expect(result.public_id).to.match(/^upload_folder\/[a-z0-9]+$/);
          return cloudinary.v2.api.delete_upload_preset(preset.name, function() {
            return done();
          });
        });
      });
    });
    it("should reject promise if error code is returned from the server", function(done) {
      return cloudinary.v2.uploader.upload(EMPTY_IMAGE).then(function() {
        return expect().fail("server should return an error when uploading an empty file");
      })["catch"](function(error) {
        return expect(error.message).to.contain("empty");
      })["finally"](function() {
        return done();
      });
    });
    it("should successfully upload with pipes", function(done) {
      var file_reader, upload;
      this.timeout(TIMEOUT_LONG);
      upload = cloudinary.v2.uploader.upload_stream(function(error, result) {
        var expected_signature;
        if (error != null) {
          return done(new Error(error.message));
        }
        uploaded.push(result.public_id);
        expect(result.width).to.eql(241);
        expect(result.height).to.eql(51);
        expected_signature = cloudinary.utils.api_sign_request({
          public_id: result.public_id,
          version: result.version
        }, cloudinary.config().api_secret);
        expect(result.signature).to.eql(expected_signature);
        return done();
      });
      file_reader = fs.createReadStream(IMAGE_FILE);
      return file_reader.pipe(upload);
    });
    it("should fail with http.Agent (non secure)", function(done) {
      var file_reader, upload;
      if (process.version <= 'v.11.11') {
        this.timeout(TIMEOUT_LONG);
        upload = cloudinary.v2.uploader.upload_stream({
          agent: new http.Agent
        }, function(error, result) {
          expect(error).to.be.ok();
          expect(error.message).to.match(/socket hang up|ECONNRESET/);
          return done();
        });
        file_reader = fs.createReadStream(IMAGE_FILE);
        return file_reader.pipe(upload);
      } else {
        this.timeout(TIMEOUT_LONG);
        expect(cloudinary.v2.uploader.upload_stream).withArgs({
          agent: new http.Agent
        }, function(error, result) {
          return done();
        }).to.throwError();
        return done();
      }
    });
    return it("should successfully override https agent", function(done) {
      var file_reader, upload;
      upload = cloudinary.v2.uploader.upload_stream({
        agent: new https.Agent
      }, function(error, result) {
        var expected_signature;
        if (error != null) {
          return done(new Error(error.message));
        }
        uploaded.push(result.public_id);
        expect(result.width).to.eql(241);
        expect(result.height).to.eql(51);
        expected_signature = cloudinary.utils.api_sign_request({
          public_id: result.public_id,
          version: result.version
        }, cloudinary.config().api_secret);
        expect(result.signature).to.eql(expected_signature);
        return done();
      });
      file_reader = fs.createReadStream(IMAGE_FILE);
      return file_reader.pipe(upload);
    });
  });

}).call(this);

//# sourceMappingURL=uploaderspec.js.map
