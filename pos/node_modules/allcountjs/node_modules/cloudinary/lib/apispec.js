// Generated by CoffeeScript 1.9.3
(function() {
  var Q, _, cloudinary, dotenv, expect, fs, utils;

  dotenv = require('dotenv');

  dotenv.load();

  expect = require("expect.js");

  cloudinary = require("../cloudinary");

  utils = require("../lib/utils");

  _ = require("lodash");

  Q = require('q');

  fs = require('fs');

  describe("api", function() {
    var IMAGE_FILE, PUBLIC_ID, TIMEOUT_LONG, TIMEOUT_MEDIUM, TIMEOUT_SHORT, find_by_attr, upload_image, uploaded, uploadedRaw;
    if (cloudinary.config().api_secret == null) {
      return console.warn("**** Please setup environment for api test to run!");
    }
    IMAGE_FILE = "test/resources/logo.png";
    PUBLIC_ID = "api_test";
    TIMEOUT_SHORT = 5000;
    TIMEOUT_MEDIUM = 20000;
    TIMEOUT_LONG = 50000;
    find_by_attr = function(elements, attr, value) {
      var element, i, len;
      for (i = 0, len = elements.length; i < len; i++) {
        element = elements[i];
        if (element[attr] === value) {
          return element;
        }
      }
      return void 0;
    };
    uploaded = [];
    uploadedRaw = [];

    /**
     * Upload an image to be tested on.
     * @callback the callback recieves the public_id of the uploaded image
     */
    upload_image = function(callback) {
      return cloudinary.v2.uploader.upload(IMAGE_FILE, function(error, result) {
        expect(error).to.be(void 0);
        expect(result).to.be.an(Object);
        uploaded.push(result.public_id);
        return callback(result);
      });
    };
    before(function(done) {
      this.timeout(0);
      this.timestamp_tag = "api_test_tag_" + cloudinary.utils.timestamp();
      uploaded = [];
      return cloudinary.v2.api.delete_resources([PUBLIC_ID, "api_test1", "api_test2"], function(error, result) {
        return Q.all([
          cloudinary.v2.uploader.upload(IMAGE_FILE, {
            public_id: PUBLIC_ID,
            tags: ["api_test_tag", this.timestamp_tag],
            context: "key=value",
            eager: [
              {
                width: 100,
                crop: "scale"
              }
            ]
          }), cloudinary.v2.uploader.upload(IMAGE_FILE, {
            public_id: "api_test2",
            tags: ["api_test_tag", this.timestamp_tag],
            context: "key=value",
            eager: [
              {
                width: 100,
                crop: "scale"
              }
            ]
          }), cloudinary.v2.api.delete_transformation("api_test_transformation"), cloudinary.v2.api.delete_upload_preset("api_test_upload_preset1"), cloudinary.v2.api.delete_upload_preset("api_test_upload_preset2"), cloudinary.v2.api.delete_upload_preset("api_test_upload_preset3"), cloudinary.v2.api.delete_upload_preset("api_test_upload_preset4")
        ])["finally"](function() {
          return done();
        });
      });
    });
    after(function(done) {
      var operations;
      this.timeout(TIMEOUT_LONG);
      operations = [];
      operations.push(cloudinary.v2.api.delete_resources_by_tag(this.timestamp_tag, {
        keep_original: false
      }));
      if (!_.isEmpty(uploaded)) {
        operations.push(cloudinary.v2.api.delete_resources(uploaded));
      }
      if (!_.isEmpty(uploadedRaw)) {
        operations.push(cloudinary.v2.api.delete_resources(uploadedRaw, {
          resource_type: "raw"
        }));
      }
      return Q.allSettled(operations)["finally"](function() {
        return done();
      });
    });
    describe("resources", function() {
      it("should allow listing resource_types", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.api.resource_types(function(error, result) {
          if (error != null) {
            return done(new Error(error.message));
          }
          expect(result.resource_types).to.contain("image");
          return done();
        });
      });
      it("should allow listing resources", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.uploader.upload(IMAGE_FILE, {
          tags: ["api_test_tag", this.timestamp_tag]
        }, function(error, result) {
          var public_id;
          if (error != null) {
            done(new Error(error.message));
          }
          public_id = result.public_id;
          uploaded.push(public_id);
          return cloudinary.v2.api.resources(function(error, result) {
            var resource;
            if (error != null) {
              return done(new Error(error.message));
            }
            resource = find_by_attr(result.resources, "public_id", public_id);
            expect(resource).not.to.eql(void 0);
            expect(resource.type).to.eql("upload");
            return done();
          });
        });
      });
      it("should allow listing resources with cursor", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.api.resources({
          max_results: 1
        }, function(error, result) {
          if (error != null) {
            return done(new Error(error.message));
          }
          expect(result.resources).to.have.length(1);
          expect(result.next_cursor).not.to.eql(void 0);
          return cloudinary.v2.api.resources({
            max_results: 1,
            next_cursor: result.next_cursor
          }, function(error2, result2) {
            if (error2 != null) {
              return done(new Error(error2.message));
            }
            expect(result2.resources).to.have.length(1);
            expect(result2.next_cursor).not.to.eql(void 0);
            expect(result.resources[0].public_id).not.to.eql(result2.resources[0].public_id);
            return done();
          });
        });
      });
      it("should allow listing resources by type", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.uploader.upload(IMAGE_FILE, {
          tags: ["api_test_tag", this.timestamp_tag]
        }, function(error, result) {
          var public_id;
          if (error != null) {
            done(new Error(error.message));
          }
          public_id = result.public_id;
          uploaded.push(public_id);
          return cloudinary.v2.api.resources({
            type: "upload"
          }, function(error, result) {
            var resource;
            if (error != null) {
              return done(new Error(error.message));
            }
            resource = find_by_attr(result.resources, "public_id", public_id);
            expect(resource).to.be.an(Object);
            expect(resource.type).to.eql("upload");
            return done();
          });
        });
      });
      it("should allow listing resources by prefix", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.api.resources({
          type: "upload",
          prefix: PUBLIC_ID
        }, function(error, result) {
          var public_ids, resource;
          if (error != null) {
            return done(new Error(error.message));
          }
          public_ids = (function() {
            var i, len, ref, results1;
            ref = result.resources;
            results1 = [];
            for (i = 0, len = ref.length; i < len; i++) {
              resource = ref[i];
              results1.push(resource.public_id);
            }
            return results1;
          })();
          expect(public_ids).to.contain(PUBLIC_ID);
          expect(public_ids).to.contain("api_test2");
          return done();
        });
      });
      it("should allow listing resources by tag", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.api.resources_by_tag("api_test_tag", {
          context: true,
          tags: true
        }, function(error, result) {
          if (error != null) {
            return done(new Error(error.message));
          }
          expect(result.resources.map(function(e) {
            return e.public_id;
          })).to.contain(PUBLIC_ID).and.contain("api_test2");
          expect(result.resources.map(function(e) {
            return e.tags[0];
          })).to.contain("api_test_tag");
          expect(result.resources.map(function(e) {
            if (e.context != null) {
              return e.context.custom.key;
            } else {
              return null;
            }
          })).to.contain("value");
          return done();
        });
      });
      it("should allow listing resources by public ids", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.api.resources_by_ids([PUBLIC_ID, "api_test2"], {
          context: true,
          tags: true
        }, function(error, result) {
          var resource;
          if (error != null) {
            return done(new Error(error.message));
          }
          resource = find_by_attr(result.resources, "public_id", PUBLIC_ID);
          expect(result.resources.map(function(e) {
            return e.public_id;
          }).sort()).to.eql([PUBLIC_ID, "api_test2"]);
          expect(result.resources.map(function(e) {
            return e.tags[0];
          })).to.contain("api_test_tag");
          expect(result.resources.map(function(e) {
            return e.context.custom.key;
          })).to.contain("value");
          return done();
        });
      });
      it("should allow listing resources specifying direction", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.api.resources_by_tag(this.timestamp_tag, {
          type: "upload",
          direction: "asc"
        }, (function(_this) {
          return function(error, result) {
            var asc, resource;
            if (error != null) {
              return done(new Error(error.message));
            }
            asc = (function() {
              var i, len, ref, results1;
              ref = result.resources;
              results1 = [];
              for (i = 0, len = ref.length; i < len; i++) {
                resource = ref[i];
                results1.push(resource.public_id);
              }
              return results1;
            })();
            return cloudinary.v2.api.resources_by_tag(_this.timestamp_tag, {
              type: "upload",
              direction: "desc"
            }, function(error, result) {
              var desc;
              if (error != null) {
                return done(new Error(error.message));
              }
              desc = (function() {
                var i, len, ref, results1;
                ref = result.resources;
                results1 = [];
                for (i = 0, len = ref.length; i < len; i++) {
                  resource = ref[i];
                  results1.push(resource.public_id);
                }
                return results1;
              })();
              expect(asc.reverse()).to.eql(desc);
              return done();
            });
          };
        })(this));
      });
      it("should allow listing resources by start_at", function(done) {
        var start_at;
        this.timeout(TIMEOUT_MEDIUM);
        start_at = null;
        return setTimeout(function() {
          start_at = new Date();
          return setTimeout(function() {
            return cloudinary.v2.uploader.upload(IMAGE_FILE, function(error, response) {
              return cloudinary.v2.api.resources({
                type: "upload",
                start_at: start_at,
                direction: "asc"
              }, function(error, resources_response) {
                expect(resources_response.resources).to.have.length(1);
                expect(resources_response.resources[0].public_id).to.eql(response.public_id);
                return done();
              });
            });
          }, 2000);
        }, 2000);
      });
      return it("should allow get resource metadata", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.uploader.upload(IMAGE_FILE, {
          tags: ["api_test_tag", this.timestamp_tag],
          eager: [
            {
              width: 100,
              crop: "scale"
            }
          ]
        }, function(error, result) {
          var public_id;
          if (error != null) {
            done(new Error(error.message));
          }
          public_id = result.public_id;
          uploaded.push(public_id);
          return cloudinary.v2.api.resource(public_id, function(error, resource) {
            if (error != null) {
              done(new Error(error.message));
            }
            expect(resource).not.to.eql(void 0);
            expect(resource.public_id).to.eql(public_id);
            expect(resource.bytes).to.eql(3381);
            expect(resource.derived).to.have.length(1);
            return done();
          });
        });
      });
    });
    describe("delete", function() {
      it("should allow deleting derived resource", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.uploader.upload(IMAGE_FILE, {
          eager: [
            {
              width: 101,
              crop: "scale"
            }
          ]
        }, function(error, r) {
          var public_id;
          if (error != null) {
            return done(new Error(error.message));
          }
          public_id = r.public_id;
          uploaded.push(public_id);
          return cloudinary.v2.api.resource(public_id, function(error, resource) {
            var derived_resource_id;
            if (error != null) {
              return done(new Error(error.message));
            }
            expect(resource).not.to.eql(void 0);
            expect(resource.bytes).to.eql(3381);
            expect(resource.derived).to.have.length(1);
            derived_resource_id = resource.derived[0].id;
            return cloudinary.v2.api.delete_derived_resources(derived_resource_id, function(error, r) {
              if (error != null) {
                return done(new Error(error.message));
              }
              return cloudinary.v2.api.resource(public_id, function(error, resource) {
                if (error != null) {
                  return done(new Error(error.message));
                }
                expect(resource).not.to.eql(void 0);
                expect(resource.derived).to.have.length(0);
                return done();
              });
            });
          });
        });
      });
      it("should allow deleting resources", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.uploader.upload(IMAGE_FILE, {
          public_id: "api_test3"
        }, function(error, r) {
          if (error != null) {
            return done(new Error(error.message));
          }
          return cloudinary.v2.api.resource("api_test3", function(error, resource) {
            expect(resource).not.to.eql(void 0);
            return cloudinary.v2.api.delete_resources(["apit_test", "api_test2", "api_test3"], function(error, result) {
              if (error != null) {
                return done(new Error(error.message));
              }
              return cloudinary.v2.api.resource("api_test3", function(error, result) {
                expect(error).to.be.an(Object);
                expect(error.http_code).to.eql(404);
                return done();
              });
            });
          });
        });
      });
      it("should allow deleting resources by prefix", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.uploader.upload(IMAGE_FILE, {
          public_id: "api_test_by_prefix"
        }, function(error, r) {
          if (error != null) {
            return done(new Error(error.message));
          }
          return cloudinary.v2.api.resource("api_test_by_prefix", function(error, resource) {
            expect(resource).not.to.eql(void 0);
            return cloudinary.v2.api.delete_resources_by_prefix("api_test_by", function() {
              return cloudinary.v2.api.resource("api_test_by_prefix", function(error, result) {
                expect(error).to.be.an(Object);
                expect(error.http_code).to.eql(404);
                return done();
              });
            });
          });
        });
      });
      return it("should allow deleting resources by tags", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.uploader.upload(IMAGE_FILE, {
          public_id: "api_test4",
          tags: ["api_test_tag_for_delete"]
        }, function(error, result) {
          if (error != null) {
            return done(new Error(error.message));
          }
          return cloudinary.v2.api.resource("api_test4", function(error, resource) {
            expect(resource).to.be.ok();
            return cloudinary.v2.api.delete_resources_by_tag("api_test_tag_for_delete", function(error, result) {
              if (error != null) {
                return done(new Error(error.message));
              }
              return cloudinary.v2.api.resource("api_test4", function(error, result) {
                expect(error).to.be.an(Object);
                expect(error.http_code).to.eql(404);
                return done();
              });
            });
          });
        });
      });
    });
    describe("tags", function() {
      it("should allow listing tags", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.api.tags(function(error, result) {
          if (error != null) {
            return done(new Error(error.message));
          }
          expect(result.tags).to.contain("api_test_tag");
          return done();
        });
      });
      it("should allow listing tag by prefix ", (function(_this) {
        return function(done) {
          _this.timeout(TIMEOUT_MEDIUM);
          return cloudinary.v2.api.tags({
            prefix: "api_test"
          }, function(error, result) {
            if (error != null) {
              return done(new Error(error.message));
            }
            expect(result.tags).to.contain("api_test_tag");
            return done();
          });
        };
      })(this));
      return it("should allow listing tag by prefix if not found", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.api.tags({
          prefix: "api_test_no_such_tag"
        }, function(error, result) {
          if (error != null) {
            return done(new Error(error.message));
          }
          expect(result.tags).to.be.empty();
          return done();
        });
      });
    });
    describe("transformations", function() {
      it("should allow listing transformations", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.api.transformations(function(error, result) {
          var transformation;
          if (error != null) {
            return done(new Error(error.message));
          }
          transformation = find_by_attr(result.transformations, "name", "c_scale,w_100");
          expect(transformation).not.to.eql(void 0);
          expect(transformation.used).to.be.ok;
          return done();
        });
      });
      it("should allow getting transformation metadata", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.api.transformation("c_scale,w_100", function(error, transformation) {
          expect(transformation).not.to.eql(void 0);
          expect(transformation.info).to.eql([
            {
              crop: "scale",
              width: 100
            }
          ]);
          return done();
        });
      });
      it("should allow getting transformation metadata by info", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.api.transformation({
          crop: "scale",
          width: 100
        }, function(error, transformation) {
          expect(transformation).not.to.eql(void 0);
          expect(transformation.info).to.eql([
            {
              crop: "scale",
              width: 100
            }
          ]);
          return done();
        });
      });
      it("should allow updating transformation allowed_for_strict", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.api.update_transformation("c_scale,w_100", {
          allowed_for_strict: true
        }, function() {
          return cloudinary.v2.api.transformation("c_scale,w_100", function(error, transformation) {
            expect(transformation).not.to.eql(void 0);
            expect(transformation.allowed_for_strict).to.be.ok;
            return cloudinary.v2.api.update_transformation("c_scale,w_100", {
              allowed_for_strict: false
            }, function() {
              return cloudinary.v2.api.transformation("c_scale,w_100", function(error, transformation) {
                expect(transformation).not.to.eql(void 0);
                expect(transformation.allowed_for_strict).not.to.be.ok;
                return done();
              });
            });
          });
        });
      });
      it("should allow creating named transformation", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.api.create_transformation("api_test_transformation", {
          crop: "scale",
          width: 102
        }, function() {
          return cloudinary.v2.api.transformation("api_test_transformation", function(error, transformation) {
            expect(transformation).not.to.eql(void 0);
            expect(transformation.allowed_for_strict).to.be.ok;
            expect(transformation.info).to.eql([
              {
                crop: "scale",
                width: 102
              }
            ]);
            expect(transformation.used).not.to.be.ok;
            return done();
          });
        });
      });
      it("should allow unsafe update of named transformation", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.api.create_transformation("api_test_transformation3", {
          crop: "scale",
          width: 102
        }, function() {
          return cloudinary.v2.api.update_transformation("api_test_transformation3", {
            unsafe_update: {
              crop: "scale",
              width: 103
            }
          }, function() {
            return cloudinary.v2.api.transformation("api_test_transformation3", function(error, transformation) {
              expect(transformation).not.to.eql(void 0);
              expect(transformation.info).to.eql([
                {
                  crop: "scale",
                  width: 103
                }
              ]);
              expect(transformation.used).not.to.be.ok;
              return done();
            });
          });
        });
      });
      it("should allow deleting named transformation", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.api.delete_transformation("api_test_transformation", function() {
          return cloudinary.v2.api.transformation("api_test_transformation", function(error, transformation) {
            expect(error.http_code).to.eql(404);
            return done();
          });
        });
      });
      return it("should allow deleting implicit transformation", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.api.transformation("c_scale,w_100", function(error, transformation) {
          expect(transformation).to.be.an(Object);
          return cloudinary.v2.api.delete_transformation("c_scale,w_100", function() {
            return cloudinary.v2.api.transformation("c_scale,w_100", function(error, transformation) {
              expect(error.http_code).to.eql(404);
              return done();
            });
          });
        });
      });
    });
    describe("upload_preset", function() {
      it("should allow creating and listing upload_presets", function(done) {
        var after_create, after_delete, create_names, delete_names, validate_presets;
        this.timeout(TIMEOUT_MEDIUM);
        create_names = ["api_test_upload_preset3", "api_test_upload_preset2", "api_test_upload_preset1"];
        delete_names = [];
        after_delete = function() {
          delete_names.pop();
          if (delete_names.length === 0) {
            return done();
          }
        };
        validate_presets = function() {
          return cloudinary.v2.api.upload_presets(function(error, response) {
            expect(response.presets.slice(0, 3).map(function(p) {
              return p.name;
            })).to.eql(delete_names);
            return delete_names.forEach(function(name) {
              return cloudinary.v2.api.delete_upload_preset(name, after_delete);
            });
          });
        };
        after_create = function() {
          var name;
          if (create_names.length > 0) {
            name = create_names.pop();
            delete_names.unshift(name);
            return cloudinary.v2.api.create_upload_preset({
              name: name,
              folder: "folder"
            }, after_create);
          } else {
            return validate_presets();
          }
        };
        return after_create();
      });
      it("should allow getting a single upload_preset", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.api.create_upload_preset({
          unsigned: true,
          folder: "folder",
          transformation: {
            width: 100,
            crop: "scale"
          },
          tags: ["a", "b", "c"],
          context: {
            a: "b",
            c: "d"
          }
        }, function(error, preset) {
          var name;
          name = preset.name;
          return cloudinary.v2.api.upload_preset(name, function(error, preset) {
            expect(preset.name).to.eql(name);
            expect(preset.unsigned).to.eql(true);
            expect(preset.settings.folder).to.eql("folder");
            expect(preset.settings.transformation).to.eql([
              {
                width: 100,
                crop: "scale"
              }
            ]);
            expect(preset.settings.context).to.eql({
              a: "b",
              c: "d"
            });
            expect(preset.settings.tags).to.eql(["a", "b", "c"]);
            return cloudinary.v2.api.delete_upload_preset(name, function() {
              return done();
            });
          });
        });
      });
      it("should allow deleting upload_presets", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.api.create_upload_preset({
          name: "api_test_upload_preset4",
          folder: "folder"
        }, function(error, preset) {
          return cloudinary.v2.api.upload_preset("api_test_upload_preset4", function() {
            return cloudinary.v2.api.delete_upload_preset("api_test_upload_preset4", function() {
              return cloudinary.v2.api.upload_preset("api_test_upload_preset4", function(error, result) {
                expect(error.message).to.contain("Can't find");
                return done();
              });
            });
          });
        });
      });
      return it("should allow updating upload_presets", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.api.create_upload_preset({
          folder: "folder"
        }, function(error, preset) {
          var name;
          name = preset.name;
          return cloudinary.v2.api.upload_preset(name, function(error, preset) {
            return cloudinary.v2.api.update_upload_preset(name, utils.merge(preset.settings, {
              colors: true,
              unsigned: true,
              disallow_public_id: true
            }), function(error, preset) {
              return cloudinary.v2.api.upload_preset(name, function(error, preset) {
                expect(preset.name).to.eql(name);
                expect(preset.unsigned).to.eql(true);
                expect(preset.settings).to.eql({
                  folder: "folder",
                  colors: true,
                  disallow_public_id: true
                });
                return cloudinary.v2.api.delete_upload_preset(name, function() {
                  return done();
                });
              });
            });
          });
        });
      });
    });
    it("should support the usage API call", function(done) {
      this.timeout(TIMEOUT_MEDIUM);
      return cloudinary.v2.api.usage(function(error, usage) {
        expect(usage.last_update).not.to.eql(null);
        return done();
      });
    });
    it("should allow deleting all derived resources", function(done) {
      this.timeout(TIMEOUT_MEDIUM);
      return cloudinary.v2.uploader.upload(IMAGE_FILE, {
        public_id: "api_test5",
        eager: {
          transformation: {
            width: 101,
            crop: "scale"
          }
        }
      }, function(error, upload_result) {
        return cloudinary.v2.api.resource("api_test5", function(error, resource) {
          var delete_all;
          if (error != null) {
            return done(new Error(error.message));
          }
          expect(resource).to.be.an(Object);
          expect(resource.derived).not.to.be.empty();
          delete_all = function(next, callback) {
            var options;
            options = {
              keep_original: true
            };
            if (next != null) {
              options.next_cursor = next;
            }
            return cloudinary.v2.api.delete_all_resources(options, function(error, delete_result) {
              if (error != null) {
                return done(new Error(error.message));
              }
              if (delete_result.next_cursor != null) {
                return delete_all(delete_result.next_cursor, callback);
              } else {
                return callback();
              }
            });
          };
          return delete_all(void 0, function() {
            return cloudinary.v2.api.resource("api_test5", function(error, new_resource) {
              if (error != null) {
                return done(new Error(error.message));
              }
              expect(new_resource.derived).to.be.empty();
              return done();
            });
          });
        });
      });
    });
    describe("update", function() {
      it("should support setting manual moderation status", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return cloudinary.v2.uploader.upload(IMAGE_FILE, {
          moderation: "manual"
        }, function(error, upload_result) {
          uploaded.push(upload_result.public_id);
          return cloudinary.v2.api.update(upload_result.public_id, {
            moderation_status: "approved"
          }, function(error, api_result) {
            expect(api_result.moderation[0].status).to.eql("approved");
            return done();
          });
        });
      });
      it("should support requesting ocr info", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return upload_image(function(upload_result) {
          return cloudinary.v2.api.update(upload_result.public_id, {
            ocr: "illegal"
          }, function(error, api_result) {
            expect(error.message).to.contain("Illegal value");
            return done();
          });
        });
      });
      it("should support requesting raw conversion", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return upload_image(function(upload_result) {
          return cloudinary.v2.api.update(upload_result.public_id, {
            raw_convert: "illegal"
          }, function(error, api_result) {
            expect(error.message).to.contain("Illegal value");
            return done();
          });
        });
      });
      it("should support requesting categorization", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return upload_image(function(upload_result) {
          return cloudinary.v2.api.update(upload_result.public_id, {
            categorization: "illegal"
          }, function(error, api_result) {
            expect(error.message).to.contain("Illegal value");
            return done();
          });
        });
      });
      it("should support requesting detection", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return upload_image(function(upload_result) {
          return cloudinary.v2.api.update(upload_result.public_id, {
            detection: "illegal"
          }, function(error, api_result) {
            expect(error.message).to.contain("Illegal value");
            return done();
          });
        });
      });
      it("should support requesting background_removal", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return upload_image(function(upload_result) {
          return cloudinary.v2.api.update(upload_result.public_id, {
            background_removal: "illegal"
          }, function(error, api_result) {
            expect(error.message).to.contain("Illegal value");
            return done();
          });
        });
      });
      it("should support requesting similarity_search", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return upload_image(function(upload_result) {
          return cloudinary.v2.api.update(upload_result.public_id, {
            similarity_search: "illegal"
          }, function(error, api_result) {
            expect(error.message).to.contain("Illegal value");
            return done();
          });
        });
      });
      return it("should support requesting auto_tagging", function(done) {
        this.timeout(TIMEOUT_MEDIUM);
        return upload_image(function(upload_result) {
          return cloudinary.v2.api.update(upload_result.public_id, {
            auto_tagging: "illegal"
          }, function(error, api_result) {
            expect(error.message).to.contain("Must use");
            return done();
          });
        });
      });
    });
    it("should support listing by moderation kind and value", function(done) {
      var after_listing, after_update, after_upload, api_results, ids, lists;
      this.timeout(TIMEOUT_MEDIUM);
      ids = [];
      api_results = [];
      lists = {};
      after_listing = function(list) {
        return function(error, list_result) {
          lists[list] = list_result.resources.map(function(r) {
            return r.public_id;
          });
          if (_.keys(lists).length === 3) {
            expect(lists.approved).to.contain(ids[0]);
            expect(lists.approved).not.to.contain(ids[1]);
            expect(lists.approved).not.to.contain(ids[2]);
            expect(lists.rejected).to.contain(ids[1]);
            expect(lists.rejected).not.to.contain(ids[0]);
            expect(lists.rejected).not.to.contain(ids[2]);
            expect(lists.pending).to.contain(ids[2]);
            expect(lists.pending).not.to.contain(ids[0]);
            expect(lists.pending).not.to.contain(ids[1]);
            return done();
          }
        };
      };
      after_update = function(error, api_result) {
        api_results.push(api_result);
        if (api_results.length === 2) {
          cloudinary.v2.api.resources_by_moderation("manual", "approved", {
            max_results: 1000,
            moderations: true
          }, after_listing("approved"));
          cloudinary.v2.api.resources_by_moderation("manual", "rejected", {
            max_results: 1000,
            moderations: true
          }, after_listing("rejected"));
          return cloudinary.v2.api.resources_by_moderation("manual", "pending", {
            max_results: 1000,
            moderations: true
          }, after_listing("pending"));
        }
      };
      after_upload = function(error, upload_result) {
        ids.push(upload_result.public_id);
        if (ids.length === 3) {
          cloudinary.v2.api.update(ids[0], {
            moderation_status: "approved"
          }, after_update);
          return cloudinary.v2.api.update(ids[1], {
            moderation_status: "rejected"
          }, after_update);
        }
      };
      cloudinary.v2.uploader.upload(IMAGE_FILE, {
        moderation: "manual"
      }, after_upload);
      cloudinary.v2.uploader.upload(IMAGE_FILE, {
        moderation: "manual"
      }, after_upload);
      return cloudinary.v2.uploader.upload(IMAGE_FILE, {
        moderation: "manual"
      }, after_upload);
    });
    return it("should list folders in cloudinary", function(done) {
      this.timeout(TIMEOUT_LONG);
      return Q.all([
        cloudinary.v2.uploader.upload(IMAGE_FILE, {
          public_id: 'test_folder1/item'
        }), cloudinary.v2.uploader.upload(IMAGE_FILE, {
          public_id: 'test_folder2/item'
        }), cloudinary.v2.uploader.upload(IMAGE_FILE, {
          public_id: 'test_folder2/item'
        }), cloudinary.v2.uploader.upload(IMAGE_FILE, {
          public_id: 'test_folder1/test_subfolder1/item'
        }), cloudinary.v2.uploader.upload(IMAGE_FILE, {
          public_id: 'test_folder1/test_subfolder2/item'
        })
      ]).then(function(results) {
        return Q.all([cloudinary.v2.api.root_folders(), cloudinary.v2.api.sub_folders('test_folder1')]);
      }).then(function(results) {
        var folder, root, root_folders, sub_1;
        root = results[0];
        root_folders = (function() {
          var i, len, ref, results1;
          ref = root.folders;
          results1 = [];
          for (i = 0, len = ref.length; i < len; i++) {
            folder = ref[i];
            results1.push(folder.name);
          }
          return results1;
        })();
        sub_1 = results[1];
        expect(root_folders).to.contain('test_folder1');
        expect(root_folders).to.contain('test_folder2');
        expect(sub_1.folders[0].path).to.eql('test_folder1/test_subfolder1');
        expect(sub_1.folders[1].path).to.eql('test_folder1/test_subfolder2');
        return cloudinary.v2.api.sub_folders('test_folder_not_exists');
      }).then(function(result) {
        console.log('error test_folder_not_exists should not pass to "then" handler but "catch"');
        return expect(true).to.eql(false);
      })["catch"](function(err) {
        expect(err.error.message).to.eql('Can\'t find folder with path test_folder_not_exists');
        return done();
      });
    });
  });

}).call(this);

//# sourceMappingURL=apispec.js.map
